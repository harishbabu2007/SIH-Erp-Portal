from django.shortcuts import render
from django.http import HttpResponse,JsonResponse
from requests.exceptions import HTTPError
from django.views.decorators.csrf import csrf_exempt # purely for test
import pyrebase
import json
from datetime import date
import requests

config = {
    "apiKey": "AIzaSyAQrhF-jzclVk_1Ud4Jh4K5327Bd9Zq_C8",
    "authDomain": "sih25erp.firebaseapp.com",
    "databaseURL": "https://sih25erp-default-rtdb.firebaseio.com",
    "projectId": "sih25erp",
    "storageBucket": "sih25erp.firebasestorage.app",
    "messagingSenderId": "817995256788",
    "appId": "1:817995256788:web:e0a926d79e4797b64fbc41",
}

firebase = pyrebase.initialize_app(config)
auth  = firebase.auth()
database = firebase.database()

def _create_or_login(email, password, create=False):
    try:
        if create:
            user = auth.create_user_with_email_and_password(email, password)
        else:
            user = auth.sign_in_with_email_and_password(email, password)
    except HTTPError as e:
        error_message = json.loads(e.args[1])['error']['message']
        if error_message == "EMAIL_NOT_FOUND":
            return HttpResponse("Email already exists")
        elif error_message == "INVALID_PASSWORD":
            return HttpResponse("Password is too weak")
        else:
            return HttpResponse("Other error:" + error_message)
    return None, user

def verify_token(token_id):
    try:
        user_info = auth.get_account_info(token_id)
        uid = user_info['users'][0]['localId']
        f = database.child("Faculty").child(uid).get(token_id).val()
        if f!=None:
            f=f["ACCESS_LEVEL"]
        return True, uid, f
    except:
        return False, None

# Create your views here.

@csrf_exempt # purely for test
def Login(request):
    if request.method != "POST":
        return HttpResponse("Form submission pls")
        
    email = request.POST.get("EMAIL")
    password = request.POST.get("PASSWORD")
    
    Response, user = _create_or_login(email, password)
    if Response!=None:
        return Response

    request.session['tokenID'] = user['idToken']
    request.session['UID'] = user.get("localId")
    request.session['refreshID'] = user['refreshToken']
    return HttpResponse(user['idToken'])

# Needs Admin Access ================================================================

# @csrf_exempt # purely for test
def AddStudent(request): 
    token_id = request.session.get('tokenID')
    condition, uid, f = verify_token(token_id)
    if not condition:
        return HttpResponse("Unauthorized")
    if f==None or f==1:
        return HttpResponse("No Access Granted")
    if request.method != "POST":
        return HttpResponse("Form submission pls")

    ID = request.POST.get("ID")
    NAME = request.POST.get("NAME")
    MOBILE = int(request.POST.get("MOBILE"))
    DOB = request.POST.get("DOB")
    GENDER = request.POST.get("GENDER")
    CATEGORY = request.POST.get("CATEGORY")
    BRANCH = request.POST.get("BRANCH")
    EMC_NAME = request.POST.get("EMC_NAME")
    EMC_MOBILE = int(request.POST.get("EMC_MOBILE"))
    EMC_RELATIONSHIP = request.POST.get("EMC_RELATIONSHIP")
    FEES = int(request.POST.get("FEES"))
    EMAIL = "john.doe@gmail.com"        #placeholder, get autogenerated email
    PASSWORD = "ThisIsABadPassword"     #placeholder, get autogenerated password

    Response, student_data = _create_or_login(EMAIL, PASSWORD, create=True)
    if Response!=None:
        return Response
    uid = student_data.get("localId")

    data = {
        "ID": ID,
        "NAME": NAME,
        "MOBILE": MOBILE,
        "DOB": DOB,
        "GENDER": GENDER,
        "CATEGORY": CATEGORY,
        "BRANCH": BRANCH,
        "CURRENT_SEMESTER":1,
        "EMERGENCY_CONTACT":{
            "NAME": EMC_NAME,
            "MOBILE": EMC_MOBILE,
            "RELATIONSHIP": EMC_RELATIONSHIP
        },
        "FEES_DATA": {
            "PAID": 0, 
            "PENDING":FEES
        },
        "ADMISSION_INFO":{
            "STATUS":"Unapproved",  #   "Approved", "Pending"
            "REQUIRED":{            #   each value is string path for firebase storage
                "10TH CERTIFICATE":None,
                "12TH CERTIFICATE":None,
                "TRANSFER CERTIFICATE":None,
                "CONDUCT CERTIFICATE":None,
                "PASSPORT SIZE PHOTOGRAPH":None,
            },
            "OPTIONAL":{
                "MEDICAL CERTIFICATE":None,
                "CASTE CERTIFICATE":None,
                "INCOME CERTIFICATE":None
            }
        }
    }
    database.child("Student").child(uid).set(data, token_id)

    return HttpResponse(student_data['idToken'])

def EditStudent(request): 
    token_id = request.session.get('tokenID')
    condition, uid, f = verify_token(token_id)
    if not condition:
        return HttpResponse("Unauthorized")
    if f==None or f==1:
        return HttpResponse("No Access Granted")
    
    if request.method != "POST":
        return HttpResponse("Form submission pls")

    ID = request.POST.get("ID")
    NAME = request.POST.get("NAME")
    MOBILE = int(request.POST.get("MOBILE"))
    DOB = request.POST.get("DOB")
    GENDER = request.POST.get("GENDER")
    CATEGORY = request.POST.get("CATEGORY")
    BRANCH = request.POST.get("BRANCH")
    EMC_NAME = request.POST.get("EMC_NAME")
    EMC_MOBILE = int(request.POST.get("EMC_MOBILE"))
    EMC_RELATIONSHIP = request.POST.get("EMC_RELATIONSHIP")
    FEES = int(request.POST.get("FEES"))

    data = {
        "ID": ID,
        "NAME": NAME,
        "MOBILE": MOBILE,
        "DOB": DOB,
        "GENDER": GENDER,
        "CATEGORY": CATEGORY,
        "BRANCH": BRANCH,
        "CURRENT_SEMESTER":1,
        "EMERGENCY_CONTACT":{
            "NAME": EMC_NAME,
            "MOBILE": EMC_MOBILE,
            "RELATIONSHIP": EMC_RELATIONSHIP
        },
        "FEES_DATA": {
            "PAID": 0, 
            "PENDING":FEES
        },
        "ADMISSION_INFO":{
            "STATUS":"Unapproved",  #   "Approved", "Pending"
            "REQUIRED":{            #   each value is string path for firebase storage
                "10TH CERTIFICATE":None,
                "12TH CERTIFICATE":None,
                "TRANSFER CERTIFICATE":None,
                "CONDUCT CERTIFICATE":None,
                "PASSPORT SIZE PHOTOGRAPH":None,
            },
            "OPTIONAL":{
                "MEDICAL CERTIFICATE":None,
                "CASTE CERTIFICATE":None,
                "INCOME CERTIFICATE":None
            }
        }
    }
    student_uid = ""
    student_list = database.child("Student").get(token_id).val()
    for i in student_list:
        if student_list[i]["ID"] == ID:
            student_uid = i
            break
    database.child("Student").child(student_uid).set(data, token_id)

    return HttpResponse(request.session['tokenID'])

def AddFaculty(request): 
    token_id = request.session.get('tokenID')
    condition, uid, f = verify_token(token_id)
    if not condition:
        return HttpResponse("Unauthorized")
    if f==None or f==1 or f==2:
        return HttpResponse("No Access Granted")
    
    if request.method != "POST":
        return HttpResponse("Form submission pls")
    
    ID = request.POST.get("ID")
    NAME = request.POST.get("NAME")
    MOBILE = int(request.POST.get("MOBILE"))
    DOB = request.POST.get("DOB")
    GENDER = request.POST.get("GENDER")
    ACCESS_LEVEL = int(request.POST.get("ACCESS_LEVEL"))
    EMAIL = "john.doe.faculty@gmail.com"    #placeholder, get autogenerated email
    PASSWORD = "ThisIsStillABadPassword"    #placeholder, get autogenerated password

    Response, faculty_data = _create_or_login(EMAIL, PASSWORD, create=True)
    if Response!=None:
        return Response
    uid = faculty_data.get("localId")

    data = {
        "ID": ID,
        "NAME": NAME,
        "MOBILE": MOBILE,
        "EMAIL": EMAIL,
        "DOB": DOB,
        "GENDER": GENDER,
        "ACCESS_LEVEL": ACCESS_LEVEL        # 3-> everything, 2->studentdata+books+hostels, 1->books+hostels, 0->nothing
    }
    database.child("Faculty").child(uid).set(data, token_id)
    return HttpResponse("Added Faculty: "+NAME)

def GetStudents(request):
    token_id = request.session.get('tokenID')
    condition, uid, f = verify_token(token_id)
    if not condition:
        return HttpResponse("Unauthorized")
    if f==None or f==1:
        return HttpResponse("No Access Granted")
    
    return JsonResponse(database.child("Student").get(token_id).val())

def GetFeesData(request):
    token_id = request.session.get('tokenID')
    condition, uid, f = verify_token(token_id)
    if not condition:
        return HttpResponse("Unauthorized")
    if f==None or f==1:
        return HttpResponse("No Access Granted")
    
    fees_paid = 0
    fees_pending = 0
    data = database.child("Student").get(token_id).val()
    for i in data:
        fees_paid += data["FEES_DATA"]["PAID"]
        fees_pending += data["FEES_DATA"]["PENDING"]
    
    return JsonResponse({"PAID": fees_paid, "PENDING": fees_pending, "TOTAL":fees_pending+fees_paid})

def GetBooks(request):
    token_id = request.session.get('tokenID')
    condition, uid, f = verify_token(token_id)
    if not condition:
        return HttpResponse("Unauthorized")
    
    return JsonResponse(database.child("Books").get(token_id).val())

def AddBook(request):
    token_id = request.session.get('tokenID')
    condition, uid, f = verify_token(token_id)
    if not condition:
        return HttpResponse("Unauthorized")
    if f==None:
        return HttpResponse("No Access Granted")
    
    if request.method != "POST":
        return HttpResponse("Form submission pls")
    
    ID = request.POST.get("ID")
    NAME = request.POST.get("NAME")
    AUTHOR = request.POST.get("AUTHOR")
    DESCRIPTION = request.POST.get("DESCRIPTION")
    ISSUED_BY = None # Roll no

    data = {
        "NAME": NAME,
        "AUTHOR": AUTHOR,
        "DESCRIPTION": DESCRIPTION,
        "ISSUED_BY": ISSUED_BY, # Roll no.
        "DATE": None
    }
    database.child("Books").child(ID).set(data, token_id)
    return HttpResponse("Added Book: "+NAME)

def IssueBook(request):
    token_id = request.session.get('tokenID')
    condition, uid, f = verify_token(token_id)
    if not condition:
        return HttpResponse("Unauthorized")
    
    if request.method != "POST":
        return HttpResponse("Form submission pls")
    
    issuedby = database.child("Books").child(ID).child("ISSUED_BY").get(token_id).val()
    if issuedby!=None:
        return HttpResponse("Already issued")
    
    ID = request.POST.get("ID")
    todaysdate = date.today()
    database.child("Books").child(ID).child("DATE").set([todaysdate.year, todaysdate.month, todaysdate.day], token_id)
    
    database.child("Books").child(ID).child("ISSUED_BY").set(database.child("Student").child(uid).child("ID").get(token_id).val(), token_id)
    return HttpResponse("Issued Book: "+database.child("Books").child(ID).child("NAME").get(token_id).val())

def ReturnBook(request):
    token_id = request.session.get('tokenID')
    condition, uid, f = verify_token(token_id)
    if not condition:
        return HttpResponse("Unauthorized")
    
    if request.method != "POST":
        return HttpResponse("Form submission pls")
    if database.child("Student").child(uid).child("ID").get(token_id).val() != database.child("Books").child(ID).child("ISSUED_BY").get(token_id).val():
        return HttpResponse("Unissued or issued by someone else")
    
    ID = request.POST.get("ID")
    
    database.child("Books").child(ID).child("ISSUED_BY").set(None, token_id)
    old_date = database.child("Books").child(ID).child("DATE").get(token_id).val()
    new_date = date.today()
    old_date = date(old_date[0], old_date[1], old_date[2])
    days = (new_date-old_date).days
    fine = 500*(days//7)
    return HttpResponse(str(fine))

@csrf_exempt # purely for test
def AddHostel(request):
    token_id = request.session.get('tokenID')
    condition, uid, f = verify_token(token_id)
    if not condition:
        return HttpResponse("Unauthorized")
    if f==None or f==1:
        return HttpResponse("No Access Granted")
    if request.method != "POST":
        return HttpResponse("Form submission pls")

    HostelName = request.POST.get("HostelName")
    FloorCount = int(request.POST.get("FloorCount"))
    RoomsPerFloor = int(request.POST.get("RoomsPerFloor"))
    PeoplePerRoom = int(request.POST.get("PeoplePerRoom"))

    smol_data = {
        "OCCUPIED_BY": "None",
        "OCCUPANCY_LIMIT": PeoplePerRoom,
        "HOSTEL": HostelName
    }
    big_data = {}
    for i in range(FloorCount):
        for j in range(RoomsPerFloor):
            ID = str(i+1) + "0"*(len(str(RoomsPerFloor)) - len(str(j+1))) + str(j+1)
            big_data[ID] = smol_data
    database.child("HostelRoom").update(big_data, token_id)
    return HttpResponse("Added Hostel: "+HostelName)

@csrf_exempt # purely for test
def AssignHostelRoom(request):
    token_id = request.session.get('tokenID')
    condition, uid, f = verify_token(token_id)
    if not condition:
        return HttpResponse("Unauthorized")
    if f==None or f==1:
        return HttpResponse("No Access Granted")
    if request.method != "POST":
        return HttpResponse("Form submission pls")
    
    RoomID = request.POST.get("RoomID")
    StudentID = request.POST.get("StudentID")
    
    occupiedby = database.child("HostelRoom").child(RoomID).child("OCCUPIED_BY").get(token_id).val()

    if occupiedby=="None":
        occupiedby = [StudentID]
    elif len(occupiedby)>=database.child("HostelRoom").child(RoomID).child("OCCUPANCY_LIMIT").get(token_id).val():
        return HttpResponse("Already full")
    else:
        occupiedby.append(StudentID)
    database.child("HostelRoom").child(RoomID).child("OCCUPIED_BY").set(occupiedby, token_id)
    return HttpResponse("Assigned HostelRoom: "+RoomID)

def EmptyHostelRoom(request):
    token_id = request.session.get('tokenID')
    condition, uid, f = verify_token(token_id)
    if not condition:
        return HttpResponse("Unauthorized")
    if f==None or f==1:
        return HttpResponse("No Access Granted")
    if request.method != "POST":
        return HttpResponse("Form submission pls")
    
    ID = request.POST.get("ID")

    database.child("HostelRoom").child(ID).child("OCCUPIED_BY").set(None, token_id)
    return HttpResponse("Emptied HostelRoom: "+database.child("HostelRoom").child(ID).get(token_id).val())

def GetHostelRoom(request):
    token_id = request.session.get('tokenID')
    condition, uid, f = verify_token(token_id)
    if not condition:
        return HttpResponse("Unauthorized")
    if f==None or f==1:
        return HttpResponse("No Access Granted")
    
    return JsonResponse(database.child("HostelRoom").get(token_id).val())