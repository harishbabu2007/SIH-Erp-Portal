from django.shortcuts import render
from django.http import HttpResponse
from requests.exceptions import HTTPError
from django.views.decorators.csrf import csrf_exempt # purely for test
import pyrebase
import json
import requests

config = {
    "apiKey": "AIzaSyAQrhF-jzclVk_1Ud4Jh4K5327Bd9Zq_C8",
    "authDomain": "sih25erp.firebaseapp.com",
    "databaseURL": "https://sih25erp-default-rtdb.firebaseio.com",
    "projectId": "sih25erp",
    "storageBucket": "sih25erp.firebasestorage.app",
    "messagingSenderId": "817995256788",
    "appId": "1:817995256788:web:e0a926d79e4797b64fbc41",
}

firebase = pyrebase.initialize_app(config)
auth  = firebase.auth()
database = firebase.database()

def _create_or_login(email, password, create=False):
    try:
        if create:
            user = auth.create_user_with_email_and_password(email, password)
        else:
            user = auth.sign_in_with_email_and_password(email, password)
    except HTTPError as e:
        error_message = json.loads(e.args[1])['error']['message']
        if error_message == "EMAIL_NOT_FOUND":
            return HttpResponse("Email already exists")
        elif error_message == "INVALID_PASSWORD":
            return HttpResponse("Password is too weak")
        else:
            return HttpResponse("Other error:" + error_message)
    return None, user

def verify_token(token_id):
    try:
        user_info = auth.get_account_info(token_id)
        uid = user_info['users'][0]['localId']
        return True, uid
    except:
        return False, None

# Create your views here.

# @csrf_exempt # purely for test
def Login(request):
    if request.method != "POST":
        return HttpResponse("Form submission pls")
        
    email = request.POST.get("EMAIL")
    password = request.POST.get("PASSWORD")
    
    Response, user = _create_or_login(email, password)
    if Response!=None:
        return Response

    request.session['tokenID'] = user['idToken']
    request.session['UID'] = user.get("localId")
    request.session['refreshID'] = user['refreshToken']
    return HttpResponse(user['idToken'])

# @csrf_exempt # purely for test
def AddStudent(request): 
    token_id = request.session.get('tokenID')
    condition, uid = verify_token(token_id)
    if not condition:
        return HttpResponse("Unauthorized")
    
    if request.method != "POST":
        return HttpResponse("Form submission pls")

    ID = request.POST.get("ID")
    NAME = request.POST.get("NAME")
    MOBILE = request.POST.get("MOBILE")
    DOB = request.POST.get("DOB")
    GENDER = request.POST.get("GENDER")
    CATEGORY = request.POST.get("CATEGORY")
    BRANCH = request.POST.get("BRANCH")
    EMC_NAME = request.POST.get("EMC_NAME")
    EMC_MOBILE = request.POST.get("EMC_MOBILE")
    EMC_RELATIONSHIP = request.POST.get("EMC_RELATIONSHIP")
    FEES = request.POST.get("FEES")
    EMAIL = "john.doe@gmail.com"        #placeholder, get autogenerated email
    PASSWORD = "ThisIsABadPassword"     #placeholder, get autogenerated password

    Response, student_data = _create_or_login(EMAIL, PASSWORD, create=True)
    if Response!=None:
        return Response
    uid = student_data.get("localId")

    data = {
        "ID": ID,
        "NAME": NAME,
        "MOBILE": MOBILE,
        "DOB": DOB,
        "GENDER": GENDER,
        "CATEGORY": CATEGORY,
        "BRANCH": BRANCH,
        "CURRENT_SEMESTER":1,
        "EMERGENCY_CONTACT":{
            "NAME": EMC_NAME,
            "MOBILE": EMC_MOBILE,
            "RELATIONSHIP": EMC_RELATIONSHIP
        },
        "FEES_DATA": {
            "PAID": 0, 
            "PENDING":FEES
        },
        "ADMISSION_INFO":{
            "STATUS":"Unapproved",  #   "Approved", "Pending"
            "REQUIRED":{            #   each value is string path for firebase storage
                "10TH CERTIFICATE":None,
                "12TH CERTIFICATE":None,
                "TRANSFER CERTIFICATE":None,
                "CONDUCT CERTIFICATE":None,
                "PASSPORT SIZE PHOTOGRAPH":None,
            },
            "OPTIONAL":{
                "MEDICAL CERTIFICATE":None,
                "CASTE CERTIFICATE":None,
                "INCOME CERTIFICATE":None
            }
        }
    }
    database.child("Student").child(uid).set(data, token_id)

    return HttpResponse(student_data['idToken'])

def EditStudent(request): 
    token_id = request.session.get('tokenID')
    condition, uid = verify_token(token_id)
    if not condition:
        return HttpResponse("Unauthorized")
    
    if request.method != "POST":
        return HttpResponse("Form submission pls")

    ID = request.POST.get("ID")
    NAME = request.POST.get("NAME")
    MOBILE = request.POST.get("MOBILE")
    DOB = request.POST.get("DOB")
    GENDER = request.POST.get("GENDER")
    CATEGORY = request.POST.get("CATEGORY")
    BRANCH = request.POST.get("BRANCH")
    EMC_NAME = request.POST.get("EMC_NAME")
    EMC_MOBILE = request.POST.get("EMC_MOBILE")
    EMC_RELATIONSHIP = request.POST.get("EMC_RELATIONSHIP")
    FEES = request.POST.get("FEES")

    data = {
        "ID": ID,
        "NAME": NAME,
        "MOBILE": MOBILE,
        "DOB": DOB,
        "GENDER": GENDER,
        "CATEGORY": CATEGORY,
        "BRANCH": BRANCH,
        "CURRENT_SEMESTER":1,
        "EMERGENCY_CONTACT":{
            "NAME": EMC_NAME,
            "MOBILE": EMC_MOBILE,
            "RELATIONSHIP": EMC_RELATIONSHIP
        },
        "FEES_DATA": {
            "PAID": 0, 
            "PENDING":FEES
        },
        "ADMISSION_INFO":{
            "STATUS":"Unapproved",  #   "Approved", "Pending"
            "REQUIRED":{            #   each value is string path for firebase storage
                "10TH CERTIFICATE":None,
                "12TH CERTIFICATE":None,
                "TRANSFER CERTIFICATE":None,
                "CONDUCT CERTIFICATE":None,
                "PASSPORT SIZE PHOTOGRAPH":None,
            },
            "OPTIONAL":{
                "MEDICAL CERTIFICATE":None,
                "CASTE CERTIFICATE":None,
                "INCOME CERTIFICATE":None
            }
        }
    }
    database.child("Student").child(uid).set(data, token_id)

    return HttpResponse(request.session['tokenID'])

def AddFaculty(request): 
    token_id = request.session.get('tokenID')
    condition, uid = verify_token(token_id)
    if not condition:
        return HttpResponse("Unauthorized")
    
    if request.method != "POST":
        return HttpResponse("Form submission pls")
    
    ID = request.POST.get("ID")
    NAME = request.POST.get("NAME")
    MOBILE = request.POST.get("MOBILE")
    DOB = request.POST.get("DOB")
    GENDER = request.POST.get("GENDER")
    ACCESS_LEVEL = request.POST.get("ACCESS_LEVEL")
    EMAIL = "john.doe.faculty@gmail.com"    #placeholder, get autogenerated email
    PASSWORD = "ThisIsStillABadPassword"    #placeholder, get autogenerated password

    Response, faculty_data = _create_or_login(EMAIL, PASSWORD, create=True)
    if Response!=None:
        return Response
    uid = faculty_data.get("localId")

    data = {
        "ID": ID,
        "NAME": NAME,
        "MOBILE": MOBILE,
        "EMAIL": EMAIL,
        "DOB": DOB,
        "GENDER": GENDER,
        "ACCESS_LEVEL": ACCESS_LEVEL,
    }
    database.child("Faculty").child(uid).set(data, token_id)
    return HttpResponse("Added Faculty: "+NAME)